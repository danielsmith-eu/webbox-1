// assumes require, $, $.rdf are defined
define(
    ['/webbox/webbox-ns.js', '/webbox/webbox-model.js', '/webbox/util.js', '/webbox/webbox-config.js'],    
    function(ns, models, util, config) {
	// updates the sync() method so that by default serializes
	// models to rdf
	// backbone-patch
	var oldSync = Backbone.sync;
	var endpoint = config.ENDPOINT;

	var to_property = function(key) {
	    if (key.indexOf('http') == 0) { return $.rdf.resource(key); }
	    if (key.indexOf(':') >= 0)  {

		var pref = key.split(':');
		var pre = pref[0], pos = pref[1];
		console.assert(ns[pre] !== undefined, "Could not find prefix " + pre);
		console.log(" prefix, ", "<"+ns[pre] + pos+">");
		return $.rdf.resource("<"+ns[pre] + pos+">");
	    }
	    console.log(" no prefix, ", "<"+ns.base + key+">");
	    return $.rdf.resource("<"+ns.base + key+">");
	};

	var to_literal_or_resource = function(v) {
	    if ( typeof(v) == 'number' ) { return $.rdf.literal(v); }
	    if ( typeof(v) == 'string' ) { /* todo: check ? */ return $.rdf.literal(v,{datatype:'xsd:string'}); } 
	    if ( typeof(v) == 'object' && v instanceof models.Model ) { return $.rdf.resource("<"+v.uri+">"); }
	    return $.rdf.literal(v);
	};

	var serialize = function(model) {
	    // CREATE, UPDATE, DELETE
	    var base = model.base || model.get("_base") || ns.base;
	    var kb = $.rdf.databank([], {base: ns.base, namespaces:ns.ns });
	    var uri = model.url();
	    var uri_r = $.rdf.resource("<"+uri+">");
	    var data = model.toJSON();
	    var triples = [];
	    _(data).keys().map(
		function(k) {
		    var v = data[k];
		    var k_r = to_property(k);
		    var v_r = to_literal_or_resource(v);
		    var triple = $.rdf.triple(uri_r,k_r,v_r);
		    console.log(triple);
		    kb.add(triple);
		});
	    var serialized = kb.dump({format:'application/rdf+xml', serialize: true});
	    return serialized;	    
	};	

	var put_update = function(uri, serialized_body) {
	    console.log("Asserting into graph ", uri + " --- " + (endpoint+"/data/"+uri));
	    return $.ajax({ type:"PUT", url: endpoint+"/data/"+uri, data:serialized_body, datatype:"text", headers:{ "Content-Type" : "application/rdf+xml" }});
	};

	var get_update = function(uri) {
	    var query = _("CONSTRUCT { ?s ?p ?o } WHERE { GRAPH \<<%= uri %>\> { ?s ?p ?o. } } LIMIT 100").template({uri:uri});
	    console.log("\""+query+"\"");
	    return $.ajax({ type:"POST", url:endpoint+"/sparql/", data:query }); 
	};
	
	Backbone.sync = function(method, model, options){
	    try { console.group('sync ' +  model.url());  } catch (x) {    }
	    log("method - ", method, " model ", model, model.url(), " - options: " , options);
	    var uri = model.url();
	    if (['create', 'update'].indexOf(method) >= 0) {
		return put_update(uri, serialize(model));
	    } else if (method == 'read') {
		return get_update(uri);
	    }
	    try { console.endGroup(); } catch (x) {   }
	};

	
    });
